Truths = {'MapReduce', 'Bellman-Ford Algorithm', 'Support Vector Machines', 'Backtracking Algorithms', 'Huffman Coding', 'Basic Hash Functions', 'Quick Sort', 'Breadth First Search', 'Hashing', 'Neural Networks', 'K-Means Clustering', 'Floyd-Warshall Algorithm', 'Selection Sort', 'Secure Hash Algorithms', 'LZW Compression', 'Heuristic Algorithms', 'Bucket Sort', 'Heap Sort', 'Elliptic Curve Cryptography', 'Merge Sort', 'Bubble Sort', 'Counting Sort', 'Genetic Algorithms', 'Basic Encryption Algorithms', 'Approximation Algorithms', 'Depth First Search', 'NP-hard problems', 'Distributed Algorithms', 'Simulated Annealing', 'Binary Search', 'Naive Bayes', 'Monte Carlo Tree Search', 'Insertion Sort', 'Random Forest', 'RSA Encryption Algorithm', 'Greedy Algorithms', 'Branch and Bound Algorithm', 'Recursive Algorithms', 'Dynamic Programming', 'PageRank Algorithm', 'Apriori Algorithm', 'Radix Sort', 'Decision Trees', 'Gradient Descent'}
Actions = ['Time Complexity Analysis', 'Space Complexity Measurement', 'Execution Time Benchmarking', 'Algorithm Stability Test', 'Memory Usage Profiling', 'Cache Performance Measurement', 'Disk I/O Measurement', 'Parallelizability Test', 'Recursive Depth Analysis', 'Best Case Execution Time', 'Worst Case Execution Time', 'Average Case Execution Time', 'Scalability Test', 'Convergence Time Test', 'Accuracy Measurement', 'Precision & Recall Evaluation', 'Sensitivity Analysis', 'Robustness Test', 'Overhead Measurement', 'Load Balancing Efficiency', 'Network Usage Analysis', 'Computational Complexity Class', 'Optimality Verification', 'Heuristic Effectiveness Measurement', 'Algorithmic Bias Analysis', 'Cryptographic Strength Test', 'Compression Ratio Measurement', 'Decompression Speed Test', 'Collision Resistance Test', 'Success Rate Test', 'Error Rate Measurement']
Outcomes = {'Time Complexity Analysis': {'type': 'str', 'states': {'O(n log n) or better': {'Bellman-Ford Algorithm', 'Insertion Sort', 'Bubble Sort', 'Floyd-Warshall Algorithm', 'Selection Sort'}, 'O(n^2) or worse': set()}}, 'Space Complexity Measurement': {'type': 'str', 'states': {'High Memory Usage': {'Counting Sort', 'Genetic Algorithms', 'MapReduce', 'Bellman-Ford Algorithm', 'PageRank Algorithm', 'Neural Networks', 'Radix Sort', 'Floyd-Warshall Algorithm'}, 'Low Memory Usage': set()}}, 'Execution Time Benchmarking': {'type': 'float', 'states': {(0, 1): {'Genetic Algorithms', 'Bellman-Ford Algorithm', 'Simulated Annealing', 'Neural Networks', 'Monte Carlo Tree Search', 'Floyd-Warshall Algorithm'}, (1, 10): set(), (10, 100): {'Counting Sort', 'Quick Sort', 'Hashing', 'Bucket Sort', 'Heap Sort', 'Binary Search', 'Merge Sort', 'Radix Sort'}}}, 'Algorithm Stability Test': {'type': 'str', 'states': {'Stable': {'Quick Sort', 'Heap Sort', 'Selection Sort'}, 'Unstable': {'Merge Sort', 'Bubble Sort', 'Insertion Sort'}}}, 'Memory Usage Profiling': {'type': 'float', 'states': {(0, 100): {'Genetic Algorithms', 'MapReduce', 'PageRank Algorithm', 'Neural Networks', 'Floyd-Warshall Algorithm'}, (100, 1000): set(), (1000, 10000): {'Counting Sort', 'Quick Sort', 'Bucket Sort', 'Heap Sort', 'Merge Sort', 'Radix Sort'}}}, 'Cache Performance Measurement': {'type': 'str', 'states': {'High Cache Hit Rate': {'Counting Sort', 'Radix Sort', 'Hashing'}, 'Low Cache Hit Rate': {'Merge Sort', 'Quick Sort', 'Heap Sort'}}}, 'Disk I/O Measurement': {'type': 'float', 'states': {(0, 100): {'MapReduce', 'PageRank Algorithm'}, (100, 1000): {'Quick Sort', 'Heap Sort', 'Merge Sort', 'Bubble Sort', 'Insertion Sort', 'Selection Sort'}}}, 'Parallelizability Test': {'type': 'str', 'states': {'Highly Parallelizable': {'Floyd-Warshall Algorithm', 'Dynamic Programming', 'Bellman-Ford Algorithm'}, 'Not Parallelizable': {'Branch and Bound Algorithm', 'Recursive Algorithms', 'Backtracking Algorithms'}}}, 'Recursive Depth Analysis': {'type': 'float', 'states': {(0, 100): {'Merge Sort', 'Quick Sort', 'Depth First Search', 'Backtracking Algorithms'}, (100, 1000): {'Breadth First Search'}}}, 'Best Case Execution Time': {'type': 'float', 'states': {(0, 1): {'Genetic Algorithms', 'Simulated Annealing', 'Neural Networks'}, (1, 100): set()}}, 'Worst Case Execution Time': {'type': 'float', 'states': {(0, 10): {'Merge Sort', 'Quick Sort', 'Heap Sort'}, (10, 1000): {'Bubble Sort', 'Insertion Sort', 'Selection Sort'}}}, 'Average Case Execution Time': {'type': 'float', 'states': {(0, 10): {'Bubble Sort', 'Insertion Sort', 'Selection Sort'}, (10, 1000): set()}}, 'Scalability Test': {'type': 'str', 'states': {'Scales Well': {'Bubble Sort', 'Insertion Sort', 'Selection Sort'}, 'Does Not Scale Well': {'Merge Sort', 'Quick Sort', 'MapReduce', 'Heap Sort'}}}, 'Convergence Time Test': {'type': 'float', 'states': {(0, 10): {'Genetic Algorithms', 'Simulated Annealing', 'Gradient Descent'}, (10, 1000): set()}}, 'Accuracy Measurement': {'type': 'float', 'states': {(0.0, 0.5): {'Naive Bayes', 'Decision Trees'}, (0.5, 1.0): set()}}, 'Precision & Recall Evaluation': {'type': 'float', 'states': {(0.0, 0.7): {'K-Means Clustering', 'Apriori Algorithm'}, (0.7, 1.0): set()}}, 'Sensitivity Analysis': {'type': 'str', 'states': {'Sensitive': {'Naive Bayes', 'Decision Trees'}, 'Robust': {'Support Vector Machines', 'Random Forest'}}}, 'Robustness Test': {'type': 'str', 'states': {'Robust': {'Random Forest', 'Neural Networks'}, 'Not Robust': {'Naive Bayes', 'Decision Trees'}}}, 'Overhead Measurement': {'type': 'float', 'states': {(0, 10): set(), (10, 100): {'MapReduce', 'PageRank Algorithm'}}}, 'Load Balancing Efficiency': {'type': 'float', 'states': {(0, 50): {'MapReduce', 'Distributed Algorithms'}, (50, 100): set()}}, 'Network Usage Analysis': {'type': 'float', 'states': {(0, 100): set(), (100, 1000): {'MapReduce', 'Distributed Algorithms', 'PageRank Algorithm'}}}, 'Computational Complexity Class': {'type': 'str', 'states': {'P': {'Genetic Algorithms', 'NP-hard problems', 'Neural Networks'}, 'NP': {'Merge Sort', 'Quick Sort', 'Heap Sort'}}}, 'Optimality Verification': {'type': 'str', 'states': {'Optimal': {'Dynamic Programming', 'Greedy Algorithms'}, 'Not Optimal': {'Approximation Algorithms', 'Heuristic Algorithms'}}}, 'Heuristic Effectiveness Measurement': {'type': 'float', 'states': {(0, 0.5): {'Dynamic Programming', 'Greedy Algorithms'}, (0.5, 1.0): {'Heuristic Algorithms'}}}, 'Algorithmic Bias Analysis': {'type': 'str', 'states': {'Biased': {'Naive Bayes', 'Decision Trees'}, 'Unbiased': {'Support Vector Machines', 'Random Forest'}}}, 'Cryptographic Strength Test': {'type': 'str', 'states': {'Strong': {'RSA Encryption Algorithm', 'Elliptic Curve Cryptography'}, 'Weak': {'Basic Encryption Algorithms', 'Hashing'}}}, 'Compression Ratio Measurement': {'type': 'float', 'states': {(0, 0.5): {'Huffman Coding', 'LZW Compression'}, (0.5, 1.0): set()}}, 'Decompression Speed Test': {'type': 'float', 'states': {(0, 1): {'Huffman Coding'}, (1, 10): {'LZW Compression'}}}, 'Collision Resistance Test': {'type': 'str', 'states': {'High Collision Resistance': {'Secure Hash Algorithms'}, 'Low Collision Resistance': {'Basic Hash Functions'}}}, 'Success Rate Test': {'type': 'float', 'states': {(0.0, 0.8): {'Genetic Algorithms', 'Simulated Annealing'}, (0.8, 1.0): set()}}, 'Error Rate Measurement': {'type': 'float', 'states': {(0.0, 0.1): set(), (0.1, 1.0): {'Naive Bayes', 'K-Means Clustering'}}}}
