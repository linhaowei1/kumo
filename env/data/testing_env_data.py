Truths = {'Load Testing', 'Stress Testing', 'Stability Testing', 'Latency Testing', 'Thread Contention Testing', 'Reliability Testing', 'Spike Testing', 'Robustness Testing', 'Recovery Testing', 'Usability Testing', 'Memory Bound Testing', 'Performance Bottleneck Testing', 'Concurrency Testing', 'Environmental Stress Testing', 'Resource Utilization Testing', 'Large Data Handling Testing', 'Data Volume Testing', 'Configuration Testing', 'Endurance Testing', 'Capacity Testing', 'Volume Testing', 'Breakpoint Testing', 'Memory Leak Testing', 'CPU Bound Testing', 'Failover Testing', 'Thread Testing', 'Scalability Limit Testing', 'Compatibility Testing', 'Load Balancing Testing', 'Overload Testing', 'Scalability Testing', 'Soak Testing', 'Throughput Testing'}
Actions = {'Usability Test Feedback Review', 'Stress Level Evaluation', 'Endurance Test Observation', 'Reliability Metrics Evaluation', 'Robustness Check', 'Breakpoint Identification', 'System Behavior Observation', 'Spike Response Monitoring', 'Load Testing Analysis', 'Concurrency Issues Detection', 'Response Time Measurement', 'Resource Utilization Monitoring', 'Configuration Change Impact Study', 'Performance Metric Evaluation', 'Failover Process Examination', 'Volume Data Analysis'}
Outcomes = {'Load Testing Analysis': {'type': 'float', 'states': {(0, 200): {'Stress Testing', 'Overload Testing', 'Scalability Testing'}, (200, 500): {'Volume Testing', 'Capacity Testing'}, (500, 2000): set(), (1001, 10000): set()}}, 'Performance Metric Evaluation': {'type': 'float', 'states': {(90, 100): {'Memory Leak Testing', 'Load Balancing Testing', 'Performance Bottleneck Testing'}, (70, 90): {'Stress Testing', 'Scalability Limit Testing'}, (0, 70): {'Reliability Testing', 'Stability Testing'}}}, 'System Behavior Observation': {'type': 'str', 'states': {'Stable Under Load': {'Thread Contention Testing', 'Concurrency Testing', 'Stability Testing'}, 'Unpredictable Behavior Under Load': {'Reliability Testing', 'Endurance Testing'}, 'Consistent Crashes Under Load': {'Load Testing', 'Configuration Testing'}}}, 'Resource Utilization Monitoring': {'type': 'float', 'states': {(0, 70): {'Memory Bound Testing', 'CPU Bound Testing'}, (70, 90): {'Resource Utilization Testing', 'Scalability Testing'}, (90, 100): {'Load Testing', 'Capacity Testing'}}}, 'Response Time Measurement': {'type': 'float', 'states': {(0, 2): {'Latency Testing', 'Performance Bottleneck Testing'}, (2, 5): {'Throughput Testing', 'Scalability Limit Testing'}, (5, 100): {'Load Testing', 'Capacity Testing'}}}, 'Stress Level Evaluation': {'type': 'str', 'states': {'System crashes under stress': {'Breakpoint Testing', 'Stress Testing', 'Robustness Testing', 'Environmental Stress Testing'}, 'System slows down under stress': {'Stress Testing'}, 'System handles stress well': set()}}, 'Endurance Test Observation': {'type': 'float', 'states': {(0, 2): {'Soak Testing', 'Endurance Testing', 'Stability Testing'}, (2, 24): {'Soak Testing', 'Endurance Testing'}, (24, 100): set()}}, 'Spike Response Monitoring': {'type': 'str', 'states': {'System fails during spike': {'Spike Testing', 'Stress Testing'}, 'System degrades performance during spike': {'Spike Testing'}, 'System handles spike smoothly': set()}}, 'Volume Data Analysis': {'type': 'float', 'states': {(0, 100): {'Volume Testing', 'Large Data Handling Testing', 'Data Volume Testing'}, (101, 500): {'Volume Testing'}, (501, 1000): set()}}, 'Breakpoint Identification': {'type': 'float', 'states': {(0, 500): {'Breakpoint Testing', 'Stress Testing'}, (501, 1000): {'Breakpoint Testing'}, (1001, 10000): set()}}, 'Configuration Change Impact Study': {'type': 'str', 'states': {'Configuration changes have significant negative impact': {'Configuration Testing', 'Compatibility Testing'}, 'Configuration changes have minor impact': set(), 'Configuration changes have no impact': set()}}, 'Reliability Metrics Evaluation': {'type': 'float', 'states': {(0, 10): {'Reliability Testing', 'Stability Testing'}, (11, 50): {'Reliability Testing'}, (51, 1000): set()}}, 'Failover Process Examination': {'type': 'str', 'states': {'Failover unsuccessful': {'Recovery Testing', 'Failover Testing'}, 'Failover successful but delayed': {'Failover Testing'}, 'Failover smooth and timely': set()}}, 'Concurrency Issues Detection': {'type': 'str', 'states': {'Concurrency issues detected': {'Concurrency Testing', 'Thread Testing'}, 'No concurrency issues detected': set()}}, 'Robustness Check': {'type': 'str', 'states': {'System fails under invalid inputs': {'Stress Testing', 'Robustness Testing'}, 'System handles invalid inputs gracefully': set()}}, 'Usability Test Feedback Review': {'type': 'str', 'states': {'Poor usability feedback': {'Usability Testing'}, 'Average usability feedback': set(), 'Excellent usability feedback': set()}}}
