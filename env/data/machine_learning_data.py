Truths = {'Neural Network', 'Decision Tree', 'Hierarchical Clustering', 'K-Nearest Neighbors', 'Topic Models', 'Multi-label Classification Models', 'Principal Component Analysis', 'K-Means Clustering', 'Logistic Regression', 'Support Vector Machine', 'Elastic Net Regression', 'Random Forest', 'Gaussian Mixture Model', 'GPT Model', 'Linear Discriminant Analysis', 'Naive Bayes', 'BERT Language Model', 'Ridge Regression', 'Support Vector Regression', 'XGBoost', 'Gradient Boosting Machine', 'Random Guess Model', 'Polynomial Regression', 'Linear Regression', 'Lasso Regression'}
Actions = ['Calculate Mean Squared Error', 'Compute R-squared Score', 'Perform Cross-Validation Testing', 'Assess Overfitting', 'Evaluate Classification Accuracy', 'Compute Precision', 'Compute Recall', 'Compute F1 Score', 'Plot ROC Curve', 'Calculate AUC', 'Compute Confusion Matrix', 'Evaluate Log-Loss', 'Calculate Mean Absolute Error', 'Compute Adjusted R-squared', 'Evaluate Explained Variance Score', 'Test Homoscedasticity', 'Assess Multicollinearity', 'Compute Variance Inflation Factor', 'Perform Residual Analysis', 'Check Normality of Residuals', 'Analyze Learning Curve', 'Evaluate Silhouette Score', 'Compute Clustering Inertia', 'Compute Perplexity', 'Evaluate BIC Score', 'Perform Hyperparameter Tuning', 'Test for Convergence', 'Compute Kappa Statistic', 'Conduct ANOVA Test', 'Measure Computational Time', 'Evaluate Memory Usage', 'Assess Interpretability', 'Evaluate Feature Importances', 'Perform Sensitivity Analysis', 'Test Robustness to Outliers', 'Compute Gradient Norm', 'Evaluate BLEU Score', 'Measure Language Model Perplexity', 'Evaluate Coverage Error', 'Compute Hamming Loss', 'Evaluate Matthews Correlation Coefficient', 'Assess Sparsity', 'Evaluate ROC AUC for Multi-class', 'Compute Cosine Similarity', 'Evaluate Log Likelihood', 'Perform Stability Selection', 'Evaluate Cumulative Gain', 'Compute Lift Chart', 'Analyze Partial Dependence Plots', 'Evaluate Gini Coefficient']
Outcomes = {'Calculate Mean Squared Error': {'type': 'float', 'states': {(0.0, 10.0): set(), (10.0, 20.0): {'Linear Regression', 'Ridge Regression', 'Lasso Regression'}, (20.0, 100.0): {'Elastic Net Regression', 'Polynomial Regression', 'Support Vector Regression'}}}, 'Compute R-squared Score': {'type': 'float', 'states': {(0.0, 0.3): {'Polynomial Regression', 'Linear Regression'}, (0.3, 0.7): {'Ridge Regression', 'Lasso Regression'}, (0.7, 1.0): set()}}, 'Perform Cross-Validation Testing': {'type': 'str', 'states': {'Consistent Performance': set(), 'High Variance': {'Decision Tree', 'K-Nearest Neighbors'}, 'High Bias': {'Linear Regression', 'Logistic Regression'}}}, 'Assess Overfitting': {'type': 'str', 'states': {'Overfitting Detected': {'Neural Network', 'Random Forest', 'Decision Tree'}, 'No Overfitting': set()}}, 'Evaluate Classification Accuracy': {'type': 'float', 'states': {(0.0, 0.6): {'K-Nearest Neighbors', 'Naive Bayes'}, (0.6, 0.8): {'Random Forest', 'Decision Tree'}, (0.8, 1.0): set()}}, 'Compute Precision': {'type': 'float', 'states': {(0.0, 0.5): {'K-Nearest Neighbors', 'Naive Bayes'}, (0.5, 0.8): {'Random Forest', 'Decision Tree'}, (0.8, 1.0): set()}}, 'Compute Recall': {'type': 'float', 'states': {(0.0, 0.5): {'Logistic Regression', 'Support Vector Machine'}, (0.5, 0.8): {'K-Nearest Neighbors', 'Naive Bayes'}, (0.8, 1.0): set()}}, 'Compute F1 Score': {'type': 'float', 'states': {(0.0, 0.6): {'Decision Tree', 'K-Nearest Neighbors', 'Naive Bayes'}, (0.6, 0.9): {'Logistic Regression', 'Support Vector Machine'}, (0.9, 1.0): set()}}, 'Plot ROC Curve': {'type': 'str', 'states': {'Good Separation': set(), 'Poor Separation': {'Logistic Regression', 'Decision Tree'}}}, 'Calculate AUC': {'type': 'float', 'states': {(0.5, 0.7): {'Logistic Regression', 'Decision Tree'}, (0.7, 0.9): {'K-Nearest Neighbors', 'Naive Bayes'}, (0.9, 1.0): set()}}, 'Compute Confusion Matrix': {'type': 'str', 'states': {'High False Positives': {'Random Forest', 'Support Vector Machine'}, 'High False Negatives': {'K-Nearest Neighbors', 'Naive Bayes'}, 'Balanced Errors': set()}}, 'Evaluate Log-Loss': {'type': 'float', 'states': {(0.0, 0.5): set(), (0.5, 1.0): {'Logistic Regression'}, (1.0, 2.0): {'Decision Tree', 'Naive Bayes'}}}, 'Calculate Mean Absolute Error': {'type': 'float', 'states': {(0.0, 5.0): set(), (5.0, 10.0): {'Linear Regression'}, (10.0, 20.0): {'Random Forest', 'Decision Tree'}}}, 'Compute Adjusted R-squared': {'type': 'float', 'states': {(0.0, 0.2): {'Polynomial Regression', 'Linear Regression'}, (0.2, 0.5): {'Ridge Regression', 'Lasso Regression'}, (0.5, 1.0): set()}}, 'Evaluate Explained Variance Score': {'type': 'float', 'states': {(0.0, 0.3): {'Principal Component Analysis', 'Linear Discriminant Analysis'}, (0.3, 0.7): set(), (0.7, 1.0): set()}}, 'Test Homoscedasticity': {'type': 'str', 'states': {'Homoscedasticity': set(), 'Heteroscedasticity': {'Polynomial Regression', 'Linear Regression'}}}, 'Assess Multicollinearity': {'type': 'str', 'states': {'High Multicollinearity': {'Linear Regression', 'Logistic Regression'}, 'Low Multicollinearity': set()}}, 'Compute Variance Inflation Factor': {'type': 'float', 'states': {(0.0, 5.0): set(), (5.0, 10.0): {'Linear Regression'}, (10.0, 100.0): {'Linear Regression', 'Logistic Regression'}}}, 'Perform Residual Analysis': {'type': 'str', 'states': {'Normal Residuals': set(), 'Non-normal Residuals': {'Polynomial Regression', 'Linear Regression'}}}, 'Check Normality of Residuals': {'type': 'str', 'states': {'Normal': set(), 'Non-normal': {'Linear Regression'}}}, 'Analyze Learning Curve': {'type': 'str', 'states': {'Underfitting': {'Linear Regression', 'Logistic Regression'}, 'Overfitting': {'Neural Network', 'Decision Tree'}, 'Good Fit': set()}}, 'Evaluate Silhouette Score': {'type': 'float', 'states': {(0.0, 0.3): {'K-Means Clustering', 'Hierarchical Clustering'}, (0.3, 0.7): set(), (0.7, 1.0): set()}}, 'Compute Clustering Inertia': {'type': 'float', 'states': {(0.0, 100.0): set(), (100.0, 500.0): {'K-Means Clustering'}}}, 'Compute Perplexity': {'type': 'float', 'states': {(0.0, 10.0): set(), (10.0, 100.0): {'Topic Models', 'Gaussian Mixture Model'}}}, 'Evaluate BIC Score': {'type': 'float', 'states': {(0.0, 500.0): set(), (500.0, 1000.0): {'Gaussian Mixture Model'}}}, 'Perform Hyperparameter Tuning': {'type': 'str', 'states': {'Optimal Parameters Found': set(), 'Never Converged': {'Neural Network', 'Gradient Boosting Machine'}, 'Overfitting Detected': {'Decision Tree'}}}, 'Test for Convergence': {'type': 'str', 'states': {'Converged': set(), 'Did Not Converge': {'Neural Network', 'XGBoost', 'Gradient Boosting Machine'}}}, 'Compute Kappa Statistic': {'type': 'float', 'states': {(0.0, 0.2): {'Random Guess Model'}, (0.2, 0.6): set(), (0.6, 1.0): set()}}, 'Conduct ANOVA Test': {'type': 'str', 'states': {'Significant Difference': {'Linear Regression'}, 'No Significant Difference': set()}}, 'Measure Computational Time': {'type': 'float', 'states': {(0.0, 1.0): set(), (1.0, 10.0): set(), (10.0, 100.0): {'Neural Network', 'Random Forest'}}}, 'Evaluate Memory Usage': {'type': 'float', 'states': {(0.0, 1000.0): set(), (1000.0, 1000000.0): {'Neural Network', 'Random Forest', 'Gradient Boosting Machine'}}}, 'Assess Interpretability': {'type': 'str', 'states': {'High Interpretability': set(), 'Low Interpretability': {'Neural Network', 'Random Forest', 'Gradient Boosting Machine'}}}, 'Evaluate Feature Importances': {'type': 'str', 'states': {'Feature Importance Available': set(), 'Feature Importance Not Available': {'K-Nearest Neighbors', 'Support Vector Machine'}}}, 'Perform Sensitivity Analysis': {'type': 'str', 'states': {'Sensitive to Input Changes': {'Neural Network', 'Decision Tree'}, 'Robust to Input Changes': set()}}, 'Test Robustness to Outliers': {'type': 'str', 'states': {'Sensitive to Outliers': {'K-Means Clustering', 'Linear Regression'}, 'Robust to Outliers': set()}}, 'Compute Gradient Norm': {'type': 'float', 'states': {(0.0, 10.0): set(), (10.0, 100.0): {'Neural Network'}}}, 'Evaluate BLEU Score': {'type': 'float', 'states': {(0.0, 0.3): {'GPT Model', 'BERT Language Model'}, (0.3, 1.0): set()}}, 'Measure Language Model Perplexity': {'type': 'float', 'states': {(0.0, 20.0): set(), (20.0, 100.0): {'GPT Model', 'BERT Language Model'}}}, 'Evaluate Coverage Error': {'type': 'float', 'states': {(1.0, 2.0): set(), (2.0, 10.0): {'Multi-label Classification Models'}}}, 'Compute Hamming Loss': {'type': 'float', 'states': {(0.0, 0.1): set(), (0.1, 1.0): {'Multi-label Classification Models'}}}, 'Evaluate Matthews Correlation Coefficient': {'type': 'float', 'states': {(0.0, 0.3): {'Decision Tree', 'Naive Bayes'}, (0.3, 1.0): set()}}, 'Assess Sparsity': {'type': 'str', 'states': {'Sparse Model': set(), 'Dense Model': {'Neural Network', 'Support Vector Machine'}}}, 'Evaluate ROC AUC for Multi-class': {'type': 'float', 'states': {(0.5, 0.7): {'Logistic Regression', 'Naive Bayes'}, (0.7, 1.0): set()}}, 'Compute Cosine Similarity': {'type': 'float', 'states': {(0.0, 0.5): set(), (0.5, 1.0): set()}}, 'Evaluate Log Likelihood': {'type': 'float', 'states': {(-1000.0, -100.0): {'Gaussian Mixture Model'}, (-100.0, 0.0): set()}}, 'Perform Stability Selection': {'type': 'str', 'states': {'Stable Features Selected': set(), 'Unstable Features': {'Elastic Net Regression', 'Lasso Regression'}}}, 'Evaluate Cumulative Gain': {'type': 'float', 'states': {(0.0, 0.5): {'Naive Bayes'}, (0.5, 1.0): set()}}, 'Compute Lift Chart': {'type': 'str', 'states': {'High Lift': set(), 'Low Lift': {'Random Guess Model'}}}, 'Analyze Partial Dependence Plots': {'type': 'str', 'states': {'Predictable Relationship': set(), 'Complex Relationship': {'Neural Network', 'Gradient Boosting Machine'}}}, 'Evaluate Gini Coefficient': {'type': 'float', 'states': {(0.0, 0.3): {'Logistic Regression'}, (0.3, 0.6): {'Decision Tree'}, (0.6, 1.0): set()}}}
